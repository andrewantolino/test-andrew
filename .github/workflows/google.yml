# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

on:
  push:
    branches:
    - master
  pull_request:

# Environment variables available to all jobs and steps in this workflow
env:
  GKE_PROJECT: ${{ secrets.PROJECT_ID }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: australia-southeast1
  GKE_CLUSTER: cluster-andrew
  IMAGE: andrew-gke-test
  REGISTRY_HOSTNAME: asia.gcr.io
  DEPLOYMENT_NAME: andrew-gke-test
  GKE_NAMESPACE: andrew-development

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./src

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_email: ${{ secrets.TF_SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.TF_SERVICE_ACCOUNT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
      
    # Build the Docker image
    - name: Build
      run: |        
        docker build -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$IMAGE":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:$GITHUB_SHA
        
    # Deploy the Docker image to the GKE cluster
    # - name: Deploy
    #   run: |
    #     gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
    #     kubectl apply -f deployment.yaml
    #     echo DEBUG: kubectl set image deployment/test-deploy nginx-container=$REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${GITHUB_SHA}
    #     kubectl set image deployment/test-deploy nginx-container=$REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${GITHUB_SHA}
    #     kubectl get pods
    #     #kubectl rollout status deployment/$DEPLOYMENT_NAME
    #     #kubectl get services -o wide
        
    # Set up kustomize
    - name: Set up Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        cd base
        cd ..
        ./kustomize build overlays/development
        ./kustomize build overlays/development | kubectl apply -f -
        ./kustomize edit set image $REGISTRY_HOSTNAME/$GKE_PROJECT/$IMAGE:${GITHUB_SHA}
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $GKE_NAMESPACE
        kubectl get services -o wide -n $GKE_NAMESPACE
